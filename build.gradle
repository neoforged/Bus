buildscript {
    dependencies {
        classpath('de.jjohannes.gradle:extra-java-module-info:0.14')
    }
}
plugins {
    id 'signing'
    id 'net.neoforged.gradleutils' version '[2.0.18,)'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'net.neoforged.licenser' version '0.7.2' apply false
}
apply plugin: 'maven-publish'

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'eclipse'
    apply plugin: 'de.jjohannes.extra-java-module-info'
    apply plugin: 'net.neoforged.licenser'

    group 'net.neoforged'
    java {
        toolchain.languageVersion = JavaLanguageVersion.of(17)
        modularity.inferModulePath.set(true)
    }
    version = gradleutils.getTagOffsetVersion()
    
    repositories {
        mavenLocal()
        maven {
            name = 'forge'
            url = 'https://maven.neoforged.net/'
        }
    }

    extraJavaModuleInfo {
        failOnMissingModuleInfo = false
        automaticModule('jmh-core-1.35.jar', 'jmh.core')
        automaticModule('jopt-simple-5.0.4.jar', 'jopt.simple') // TODO: Update ModLauncher to use jopt 6.0-alpha-3+, which sets the module name to 'joptsimple'
    }
    
    def isNonStable = { String version ->
        def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { type -> version.toUpperCase().contains(type) }
        def regex = /^[0-9,.v-]+(-r)?$/
        return !stableKeyword && !(version ==~ regex)
    }

    dependencyUpdates {
        rejectVersionIf {
            isNonStable(it.candidate.version)
        }
    }
    
    // Hack eclipse into knowing that the gradle deps are modules
    eclipse {
        classpath {
            containers 'org.eclipse.buildship.core.gradleclasspathcontainer'
            file {
                whenMerged {
                    entries.findAll { it.kind == 'con' && it.path == 'org.eclipse.buildship.core.gradleclasspathcontainer' }.each {
                        it.entryAttributes['module'] = 'true'
                    }
                }
            }
        }
    }

    license {
        header = rootProject.file("codeformat/HEADER.txt")
        skipExistingHeaders = true
        include '**/*.java'
    }
}

changelog {
    fromTag '7.0'
}

logger.lifecycle('Version: ' + version)

ext.sharedManifest = manifest {
    attributes([
        'Specification-Title': 'Bus',
        'Specification-Vendor': 'NeoForged',
        'Specification-Version': '1', // Currently version 1 of the eventbus specification
        'Implementation-Title': project.name,
        'Implementation-Version': "${project.version}+${gradleutils.gitInfo.branch}.${gradleutils.gitInfo.abbreviatedId}",
        'Implementation-Vendor' :'NeoForged',
        'Implementation-Timestamp': java.time.Instant.now().toString(),
        'Git-Commit': gradleutils.gitInfo.abbreviatedId,
        'Git-Branch': gradleutils.gitInfo.branch,
    ] as LinkedHashMap, 'net/neoforged/bus/service/')
}

jar {
    manifest = project.manifest {
        from sharedManifest
    }
}
java.withSourcesJar()
java.withJavadocJar()

dependencies {
    implementation('org.ow2.asm:asm:9.2')
    implementation('org.apache.logging.log4j:log4j-api:2.17.1')
    compileOnly('org.jetbrains:annotations:23.0.0')
    api('net.jodah:typetools:0.6.3')
}

nexusPublishing {
    repositories {
        sonatype {
            username.set(System.getenv('SONATYPE_USER') ?: '')
            password.set(System.getenv('SONATYPE_PASSWORD') ?: '')
            nexusUrl.set(uri('https://s01.oss.sonatype.org/service/local/'))
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            pom {
                name = 'Bus'
                description = 'High performance Event Bus library'
                url = 'https://github.com/neoforged/bus'
                scm {
                    url = 'https://github.com/neoforged/bus'
                    connection = 'scm:git:git://github.com/neoforged/bus.git'
                    developerConnection = 'scm:git:git@github.com:neoforged/bus.git'
                }
                issueManagement {
                    system = 'github'
                    url = 'https://github.com/neoforged/bus/issues'
                }

                licenses {
                    license {
                        name = 'LGPLv2.1'
                        url = 'https://www.gnu.org/licenses/old-licenses/lgpl-2.1.txt'
                    }
                }

                developers {
                    developer {
                        id = 'neoforged'
                        name = 'NeoForged'
                        email = 'contact@neoforged.net'
                        url = 'https://github.com/NeoForged/'
                    }
                }
            }
        }
    }
    repositories {
        maven gradleutils.getPublishingForgeMaven()
    }
}

if (System.getenv('GPG_PRIVATE_KEY')) {
    signing {
        final signingKey = System.getenv('GPG_PRIVATE_KEY') ?: ''
        final signingPassword = System.getenv('GPG_KEY_PASSWORD') ?: ''
        useInMemoryPgpKeys(signingKey, signingPassword)
        sign publishing.publications.mavenJava
    }
}
