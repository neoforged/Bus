configurations {
    jmhOnly
}

dependencies {
    implementation(rootProject)
    implementation(project(':bus-testjars'))
    implementation('org.junit.jupiter:junit-jupiter-engine:5.8.+')
    implementation('org.apache.logging.log4j:log4j-core:2.17.1')
    implementation('org.apache.logging.log4j:log4j-api:2.17.1')
    implementation('org.openjdk.jmh:jmh-core:1.35')
    jmhOnly('org.openjdk.jmh:jmh-core:1.35')
    jmhOnly('org.openjdk.jmh:jmh-generator-annprocess:1.35')
    jmhOnly(sourceSets.main.output)
    compileOnly('org.jetbrains:annotations:23.0.0')
    runtimeOnly('org.apiguardian:apiguardian-api:1.1.2')
    annotationProcessor('org.openjdk.jmh:jmh-generator-annprocess:1.35')
}

tasks.register('jmh', JavaExec).configure {
    javaLauncher = javaToolchains.launcherFor {
        languageVersion = JavaLanguageVersion.of(17)
    }
    dependsOn(tasks.compileJava)
    jvmArgs= [
        '-p', sourceSets.main.runtimeClasspath.asPath,
        '--add-modules', 'ALL-MODULE-PATH',
        '--add-exports', 'net.neoforged.bus.jmh/net.neoforged.bus.benchmarks.jmh_generated=jmh.core',
    ]
    classpath = files(configurations.jmhOnly.asPath)
    mainClass = 'org.openjdk.jmh.Main'
    args    '-bm', 'avgt'  // benchmark mode
    args    '-r', '5s' // iteration time
    args    '-w', '5s' // warmup time
    args    '-wi', '3' // warmup iterations
    args    '-prof', 'stack' // profilers
    args    '-tu', 'ns' // time unit
    args    '-f', '3' // forks
    args    '-rff', project.file("${rootProject.buildDir}/jmh_results.txt")  // results file
    args    'net.neoforged.bus.benchmarks.FewListenersBenchmark'
    args    'net.neoforged.bus.benchmarks.ManyListenersBenchmark'
    args    'net.neoforged.bus.benchmarks.ManyDifferentListenersBenchmark'
}
